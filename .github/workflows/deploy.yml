name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: |
          echo "LOWERCASE_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Set lowercase image name
        run: |
          echo "LOWERCASE_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard

      - name: Setup WireGuard
        run: |
          echo "${{ secrets.WIREGUARD_CONF }}" | sudo tee /etc/wireguard/wg0.conf > /dev/null
          sudo chmod 600 /etc/wireguard/wg0.conf
          sudo wg-quick up wg0

      - name: Get Portainer JWT token
        id: get-token
        run: |
          TOKEN=$(curl -k -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.PORTAINER_USERNAME }}", "password": "${{ secrets.PORTAINER_PASSWORD }}"}' \
            "${{ secrets.PORTAINER_ENDPOINT }}/api/auth" | jq -r .jwt)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy to Portainer
        run: |
          # Create stack file content
          STACK_CONTENT=$(cat << 'EOF'
          version: '3.8'
          
          services:
            gamerecommender:
              image: ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:sha-${{ github.sha }}
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:2002
                - ConnectionStrings__DefaultConnection=Data Source=gamerecommender.db
                - Steam__ApiKey=${{ secrets.STEAM_API_KEY }}
                - DataProtection__Path=/data/keys
                - DataProtection__ApplicationName=GameRecommender
              volumes:
                - gamerecommender_data:/data
                - gamerecommender_keys:/root/.aspnet/DataProtection-Keys
              ports:
                - "2002:2002"
              restart: unless-stopped
              networks:
                - gamerecommender_net
          
          volumes:
            gamerecommender_data:
              driver: local
            gamerecommender_keys:
              driver: local
          
          networks:
            gamerecommender_net:
              driver: bridge
          EOF
          )
          
          # Get the endpoint ID from Portainer
          ENDPOINT_ID=$(curl -k -s \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" \
            "${{ secrets.PORTAINER_ENDPOINT }}/api/endpoints" | jq -r '.[0].Id')
          
          echo "Using Endpoint ID: $ENDPOINT_ID"
          
          # Check if stack exists
          STACK_ID=$(curl -k -s \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" \
            "${{ secrets.PORTAINER_ENDPOINT }}/api/stacks" | jq -r '.[] | select(.Name=="gamerecommender") | .Id')
          
          if [ -n "$STACK_ID" ]; then
            # Update existing stack
            curl -k -X PUT \
              -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"stackFileContent\": $(echo "$STACK_CONTENT" | jq -R -s .),
                \"prune\": true,
                \"pullImage\": true
              }" \
              "${{ secrets.PORTAINER_ENDPOINT }}/api/stacks/$STACK_ID/update?method=string&endpointId=$ENDPOINT_ID"
          else
            # Create new stack
            curl -k -X POST \
              -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"gamerecommender\",
                \"stackFileContent\": $(echo "$STACK_CONTENT" | jq -R -s .)
              }" \
              "${{ secrets.PORTAINER_ENDPOINT }}/api/stacks?method=string&type=2&endpointId=$ENDPOINT_ID"
          fi

      - name: Cleanup WireGuard
        if: always()
        run: sudo wg-quick down wg0 