@model GameRecommender.Models.VotingSessionResult
@using GameRecommender.Extensions

@{
    ViewData["Title"] = "Voting Results";
    var currentUserId = User.Identity?.IsAuthenticated == true ? 
        User.GetSteamId() : 
        Context.Request.Cookies["AnonymousId"];
    var hasVoted = Model.Results.Any(r => r.VoterRatings.Any(v => v.VoterId == currentUserId));
}

<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <h2 class="card-title mb-4">Voting Results</h2>
            
            <div id="resultsContainer">
                @await Html.PartialAsync("_VotingResultsPartial", Model)
            </div>

            <div class="d-flex justify-content-between align-items-center mt-4">
                <div>
                    @if (!hasVoted && !string.IsNullOrEmpty(currentUserId))
                    {
                        <a asp-action="VotingSession" asp-route-id="@Model.SessionId" 
                           class="btn btn-outline-primary me-2">Back to Voting</a>
                    }
                    <button onclick="location.reload()" class="btn btn-outline-success">
                        <i class="bi bi-arrow-clockwise"></i> Refresh Results
                    </button>
                    <small class="text-muted ms-2">Results auto-refresh every 30 seconds</small>
                </div>
                <a asp-action="Index" class="btn btn-secondary">Return to Library</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-refresh the page every 30 seconds
        setTimeout(() => location.reload(), 30000);
    </script>
} 